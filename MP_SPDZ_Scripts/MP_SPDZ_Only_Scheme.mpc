# Run all commands from the MP-SPDZ folder
# Run ./compile.py MP_SPDZ_Only_Scheme
# Run P0: ./atlas-party.x MP_SPDZ_Only_Scheme -p 0 -N 3 -IF ../PycharmProjects/MasterThesis/Client/MP_SPDZ_Inputs/MP_SPDZ_Only_Input -OF ../PycharmProjects/MasterThesis/Client/MPSPDZ_Outputs/MP_SPDZ_Only_Output &
# Run P1: ./atlas-party.x MP_SPDZ_Only_Scheme -p 1 -N 3 -IF ../PycharmProjects/MasterThesis/Server/MP_SPDZ_Inputs/MP_SPDZ_Only_Input &
# Run P2: ./atlas-party.x MP_SPDZ_Only_Scheme -p 2 -N 3


from oram import OptimalORAM


def not_in(target, set, size):
    """
        Checks if the target is not in the  set.

        Parameters:
            - target (sint) : The item to be compared against the set.
            - set (sint.ORAM | sint.Array) : The set of items.

        Returns:
            - (sint) : Outcome.
    """

    counter = sint(0)
    for element in range(size):
        counter += (target == set[element])

    return (counter == 0)


def search_indexing(indexing):
    """
        Checks if each search query matches with any of the indices. If so it adds the
        file as a pointer to an array.

        Parameters:
            -

        Returns:
            - pointers (sint.Array) : The pointers collected from the comparison.
            - size (sint) : The number of files the pointer can point to.
    """

    counter = 0
    pointers = sint.Array(number_of_files)
    for i in range(size_of_search_queries):
        search_query = search_queries[i]

        for j in range(number_of_files):
            file = indexing[j][0]

            for l in range(1, index_length + size_of_set_of_attributes):
                attribute = indexing[j][l]

                match = (search_query == attribute)

                pointers[counter] += match * file * not_in(file, pointers, number_of_files)

        counter += 0

    return pointers, number_of_files


def search_inverse_index_matrix_oram(inverted_index_matrix):
    """
        Checks if each search query matches with any of the indices in the inverted index matrix. If so it adds the
        pointers for that index to a set.

        Parameters:
            -

        Returns:
            - pointers (set) : The pointers collected from the comparison.
    """

    size_counter = sint(0)
    pointers = OptimalORAM(number_of_files + 1)
    for i in range(size_of_search_queries):
        search_query = search_queries[i]

        for j in range(number_of_indices):
            index = inverted_index_matrix[j][0]

            match = (search_query == index)

            for l in range(1, index_length + size_of_set_of_pointers):
                pointer = inverted_index_matrix[j][l]

                pointers[size_counter] = match * pointer * not_in(pointer, pointers, number_of_files + 1)
                size_counter += (pointers[size_counter] != 0)

    return pointers


def search_inverse_index_matrix(inverted_index_matrix):
    """
        Checks if each search query matches with any of the indices in the inverted index matrix. If so it adds the
        pointers to an array.

        Parameters:
            -

        Returns:
            - pointers (sint.Array) : The pointers collected from the comparison.
            - pointers_size (int) : size of the pointers array
    """

    counter = 0
    pointers_size = number_of_indices * size_of_set_of_pointers * size_of_search_queries
    pointers = sint.Array(pointers_size)
    for i in range(size_of_search_queries):
        search_query = search_queries[i]

        for j in range(number_of_indices):
            index = inverted_index_matrix[j][0]

            match = (search_query == index)

            for l in range(1, index_length + size_of_set_of_pointers):
                pointer = inverted_index_matrix[j][l]
                pointers[counter * size_of_set_of_pointers + (l - 1)] = match * pointer

            counter += 1

    return pointers, pointers_size


def retrieve_files_input_is_set_oram(pointers):
    """
        Based on the pointers (as a set) the corresponding files are retrieved to the client.

        Parameters:
            - pointers (sint.ORAM) : The pointers to the files.

        Returns:
            - files (sint.ORAM) : The files.
    """

    size_counter = sint(0)
    files = OptimalORAM(number_of_files * file_size_length_upper_bound)
    for i in range(number_of_files):
        file_signature = database[i][0]

        for j in range(number_of_files):
            pointer = pointers[j]

            match = (pointer == file_signature)

            for l in range(1, file_signature_length + file_size_length_upper_bound):
                character = database[j][l]
                files[size_counter * file_size_length_upper_bound + (l - 1)] = match * character

            size_counter += match

    return files


def retrieve_files_input_is_set(pointers):
    """
        Based on the pointers (as a set) the corresponding files are retrieved to the client.

        Parameters:
            - pointers (sint.ORAM) : The pointers to the files.

        Returns:
            - files (sint.Array) : The files.
    """

    counter = 0
    files = sint.Array(number_of_files * number_of_files * file_size_length_upper_bound)
    for i in range(number_of_files):
        pointer = pointers[i]

        for j in range(number_of_files):
            file_signature = database[j][0]

            match = (pointer == file_signature)

            for l in range(1, file_signature_length + file_size_length_upper_bound):
                character = database[j][l]
                files.assign(match * character, counter * file_size_length_upper_bound + (l - 1))

            counter += 1

    return files


def retrieve_files(pointers, pointers_size):
    """
        Based on the pointers (as an array) the corresponding files are retrieved to the client.

        Parameters:
            - pointers (sint.Array) : The pointers to the files.

        Returns:
            - files (sint.Array) : The files.
    """

    counter = 0
    files = sint.Array(number_of_files * file_size_length_upper_bound * pointers_size)
    for i in range(pointers_size):
        pointer = pointers[i]

        for j in range(number_of_files):
            file_signature = database[j][0]

            match = (pointer == file_signature)

            for l in range(1, file_signature_length + file_size_length_upper_bound):
                character = database[j][l]
                files.assign(match * character, counter * file_size_length_upper_bound + (l - 1))

            counter += 1

    return files


def test_searching_retrieval():
    """
        Searching the database pointers using the indexing to see if any attributes of the file matches any of the
        search queries. Noting down the files with a match to retrieve the files from the database and reveal them to
        the client.

        Using the approach: Searching (Array solution) and Retrival (Array solution)

        Parameters:
            -

        Returns:
            -
    """

    # Indexing
    indexing = sint.input_tensor_from(1, [number_of_files, index_length + size_of_set_of_attributes])

    # Pointers is an array of size number_of_files * size_of_set_of_pointers * size_of_search_queries
    pointers, size = search_indexing(indexing)

    # Files is an array of size number_of_files * file_size_length_upper_bound * number_of_indices
    files = retrieve_files(pointers, size)
    files.print_reveal_nested()


def test_inverse_searching_retrieval():
    """
        Searching the database pointers using the inverted index matrix to find the intersection between the indices and
         search queries. Then extracts the file pointers from the indices in the intersection to retrieve the files from
        the database and reveal them to the client.

        Using the approach: Searching (Array solution) and Retrival (Array solution)

        Parameters:
            -

        Returns:
            -
    """

    # Indexing
    inverted_index_matrix = sint.input_tensor_from(1, [number_of_indices, index_length + size_of_set_of_pointers])

    # Pointers is an array of size number_of_files * size_of_set_of_pointers * size_of_search_queries
    pointers, size = search_inverse_index_matrix(inverted_index_matrix)

    # Files is an array of size number_of_files * file_size_length_upper_bound * number_of_indices * size_of_set_of_pointers * size_of_search_queries
    files = retrieve_files(pointers, size)
    files.print_reveal_nested()


def test_inverse_searching_oram_retrival():
    """
        Searching the database pointers using the inverted index matrix to find the intersection between the indices and
         search queries. Then extracts the file pointers from the indices in the intersection to retrieve the files from
        the database and reveal them to the client.

        Using the approach: Searching (ORAM solution) and Retrival (Array solution)

        Parameters:
            -

        Returns:
            -
    """

    # Indexing
    inverted_index_matrix = sint.input_tensor_from(1, [number_of_indices, index_length + size_of_set_of_pointers])

    # Pointers is a set of size number_of_files
    pointers = search_inverse_index_matrix_oram(inverted_index_matrix)

    # Files is an array of size number_of_files * number_of_files * file_size_length_upper_bound
    files = retrieve_files_input_is_set(pointers)
    files.print_reveal_nested()


def test_inverse_searching_oram_retrival_oram():
    """
        Searching the database pointers using the inverted index matrix to find the intersection between the indices and
        search queries. Then extracts the file pointers from the indices in the intersection to retrieve the files from
        the database and reveal them to the client.

        Using the approach: Searching (ORAM solution) and Retrival (ORAM solution)

        Parameters:
            -

        Returns:
            -
    """

    # Indexing
    inverted_index_matrix = sint.input_tensor_from(1, [number_of_indices, index_length + size_of_set_of_pointers])

    # Pointers is a set of size number_of_files
    pointers = search_inverse_index_matrix_oram(inverted_index_matrix)

    # Files is an array of size number_of_files * file_size_length_upper_bound
    files = retrieve_files_input_is_set_oram(pointers)

    array = sint.Array(number_of_files * file_size_length_upper_bound)   # Almost doubles the time execution
    for i in range(number_of_files * file_size_length_upper_bound):
        array.assign(files[i] , i)
    array.print_reveal_nested()


# Defining global variables
size_of_search_queries = 1

index_length = 1
number_of_indices = 1
size_of_set_of_pointers = 1
size_of_set_of_attributes = 8

file_signature_length = 1
number_of_files = 1
file_size_length_upper_bound = 6000

# Inputs from parties    #run(['./MP-SPDZ Only Scheme/run.sh'])
search_queries = sint.input_tensor_from(0, [size_of_search_queries])
database = sint.input_tensor_from(1, [number_of_files, file_signature_length + file_size_length_upper_bound])

# Testing different combinations of approaches

# Results: Time = 1.492 seconds, Data sent = 178.9 MB, for ten file and one query
test_searching_retrieval()

# Results: Time = 1.1 seconds, Data sent = 126.5 MB, for four file and one query
# test_inverse_searching_retrieval()

# Results: Time = 0.665 seconds, Global data sent = 34.7 MB, for four file and one query
# test_inverse_searching_oram_retrival()

# Results: Time = 330.524 seconds, Global data sent = 9278.5 MB, for one file and one query
# test_inverse_searching_oram_retrival_oram()

