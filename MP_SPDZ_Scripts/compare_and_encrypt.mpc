from Oblivious_Database_Query_Scheme.getters import get_block_size as block_size
from Oblivious_Database_Query_Scheme.getters import get_number_of_blocks as number_of_blocks

from circuit import Circuit
if_else = Circuit('if_else128')


sb128 = sbits.get_type(block_size())

# Party 0 plaintexts
plaintexts_a = sbitvec([sb128.get_input_from(0) for _ in range(number_of_blocks())])
plaintexts_b = sbitvec([sb128.get_input_from(0) for _ in range(number_of_blocks())])

# Party 1 swap plaintexts indicator
swap = sbit.get_input_from(1)

# Party 1 key streams
key_streams_a = sbitvec([sb128.get_input_from(1) for _ in range(number_of_blocks())])
key_streams_b = sbitvec([sb128.get_input_from(1) for _ in range(number_of_blocks())])

# Sorts plaintexts
ordered_plaintexts_a = if_else(sbitvec([swap] * number_of_blocks()), plaintexts_b, plaintexts_a)
ordered_plaintexts_b = if_else(sbitvec([swap] * number_of_blocks()), plaintexts_a, plaintexts_b)

# Ciphertexts
ciphertexts_a = key_streams_a.bit_xor(ordered_plaintexts_a)
ciphertexts_b = key_streams_b.bit_xor(ordered_plaintexts_b)

# Reveal ciphertexts to party 0
for i in range(number_of_blocks()):
    ciphertexts_a.elements()[i].reveal().print_reg()
for i in range(number_of_blocks()):
    ciphertexts_b.elements()[i].reveal().print_reg()
