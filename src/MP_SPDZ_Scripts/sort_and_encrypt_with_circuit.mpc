from application.getters import get_block_size as block_size
from application.getters import get_number_of_blocks as number_of_blocks

from circuit import Circuit
sort_and_encrypt = Circuit(f'sort_and_encrypt{block_size()}')


sb = sbits.get_type(block_size())

# Party 0 plaintexts
plaintexts_a = sbitvec([sb.get_input_from(0) for _ in range(number_of_blocks())])
plaintexts_b = sbitvec([sb.get_input_from(0) for _ in range(number_of_blocks())])

# Party 1 swap plaintexts indicator
swap = sbit.get_input_from(1)

# Party 1 key streams
key_streams_a = sbitvec([sb.get_input_from(1) for _ in range(number_of_blocks())])
key_streams_b = sbitvec([sb.get_input_from(1) for _ in range(number_of_blocks())])

# Ciphertexts
ciphertexts_a, ciphertexts_b = sort_and_encrypt(sbitvec([swap] * number_of_blocks()),
                                                plaintexts_a, plaintexts_b,
                                                key_streams_a, key_streams_b
                                                )

# Reveal ciphertexts to party 0
for i in range(number_of_blocks()):
    ciphertexts_a.elements()[i].reveal().print_reg()
for i in range(number_of_blocks()):
    ciphertexts_b.elements()[i].reveal().print_reg()
