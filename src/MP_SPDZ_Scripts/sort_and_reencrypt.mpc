from application.getters import get_block_size as block_size
from application.getters import get_number_of_blocks as number_of_blocks


sb = sbits.get_type(block_size())

# Party 0 plaintexts
ciphertexts_a = sbitvec([sb.get_input_from(0) for _ in range(number_of_blocks())])
ciphertexts_b = sbitvec([sb.get_input_from(0) for _ in range(number_of_blocks())])

# Party 1 swap plaintexts indicator
swap = sbit.get_input_from(1)

# Party 1 key streams
key_streams_a = sbitvec([sb.get_input_from(1) for _ in range(number_of_blocks())])
key_streams_b = sbitvec([sb.get_input_from(1) for _ in range(number_of_blocks())])
new_key_streams_a = sbitvec([sb.get_input_from(1) for _ in range(number_of_blocks())])
new_key_streams_b = sbitvec([sb.get_input_from(1) for _ in range(number_of_blocks())])

# Plaintexts
plaintexts_a = key_streams_a.bit_xor(ciphertexts_a)
plaintexts_b = key_streams_b.bit_xor(ciphertexts_b)

# Sorts plaintexts
ordered_plaintexts_a = sbitvec([(swap).if_else(plaintexts_b.elements()[i], plaintexts_a.elements()[i]) for i in range(number_of_blocks())])
ordered_plaintexts_b = sbitvec([(swap).if_else(plaintexts_a.elements()[i], plaintexts_b.elements()[i]) for i in range(number_of_blocks())])

# New Ciphertexts
new_ciphertexts_a = new_key_streams_a.bit_xor(ordered_plaintexts_a)
new_ciphertexts_b = new_key_streams_b.bit_xor(ordered_plaintexts_b)

# Reveal ciphertexts to party 0
for i in range(number_of_blocks()):
    new_ciphertexts_a.elements()[i].reveal().print_reg()
for i in range(number_of_blocks()):
    new_ciphertexts_b.elements()[i].reveal().print_reg()
